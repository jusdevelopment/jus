
		<style>
			body {
				background:#777;
				padding:0;
				margin:0;
				font-weight: bold;
				
			}

			#info {
				position: absolute;
				top: 0px; width: 100%;
				color: #ffffff;
				padding: 5px;
				font-family:Monospace;
				font-size:13px;
				text-align:center;
				z-index:1000;
			}

			a {
				color: #ffffff;
			}

			#oldie a { color:#da0 }
		</style>

		<script src="assets/Three.js"></script>

		<script src="assets/Detector.js"></script>

		<script>

			if ( ! Detector.webgl ) Detector.addGetWebGLMessage();

			var container;
			var time = 0;
			var ORIGIN = new THREE.Vector3();
			var camera, scene, renderer;
			var cameraCube, sceneCube;

			var mesh, lightMesh, geometry;
			var spheres = [];

			var directionalLight, pointLight;

			var mouseX = 0, mouseY = 0;

			//var windowHalfX = window.innerWidth / 2;
			//var windowHalfY = window.innerHeight / 2;

			var windowX = window.innerWidth;
			var windowY = window.innerHeight;

			document.addEventListener( 'mousemove', onDocumentMouseMove, false );

			init();
			animate();

			function init() {

				container = document.createElement( 'div' );
				document.getElementById("webglbg_frame").appendChild( container );

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 100000 );
				camera.position.z = 2000;

				cameraCube = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 100000 );

				scene = new THREE.Scene();
				sceneCube = new THREE.Scene();

				var geometry = new THREE.SphereGeometry( 100, 32, 16 );

			
				var urls = [
					"<%= asset_path('pos-x.png') %>", 
					"<%= asset_path('neg-x.png') %>",
					"<%= asset_path('pos-y.png') %>", 
					"<%= asset_path('neg-y.png') %>",
					"<%= asset_path('pos-z.png') %>",
					"<%= asset_path('neg-z.png') %>"
				];

				var textureCube = THREE.ImageUtils.loadTextureCube( urls, new THREE.CubeRefractionMapping() );
				var material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube, refractionRatio: 0.99 } );

				for ( var i = 0; i < 50; i ++ ) {

					var mesh = new THREE.Mesh( geometry, material );

					mesh.position.x = Math.random() * 10000 - 5000;
					mesh.position.y = Math.random() * 10000 - 5000;
					mesh.position.z = Math.random() * 10000 - 5000;

					mesh.scale.x = mesh.scale.y = mesh.scale.z = Math.random() * 3 + 1;

					scene.add( mesh );

					spheres.push( mesh );

				}

				// Skybox

				var shader = THREE.ShaderLib[ "cube" ];
				shader.uniforms[ "tCube" ].value = textureCube;

				var material = new THREE.ShaderMaterial( {

					fragmentShader: shader.fragmentShader,
					vertexShader: shader.vertexShader,
					uniforms: shader.uniforms,
					depthWrite: false,
					side: THREE.BackSide

				} ),

				mesh = new THREE.Mesh( new THREE.BoxGeometry( 100, 100, 100 ), material );
				sceneCube.add( mesh );

				//

				renderer = new THREE.WebGLRenderer();
				renderer.setSize( window.innerWidth, window.innerHeight );
				renderer.autoClear = false;
				container.appendChild( renderer.domElement );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				//windowHalfX = window.innerWidth / 2,
				//windowHalfY = window.innerHeight / 2,
				windowX = window.innerWidth,
				windowY = window.innerHeight,

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				cameraCube.aspect = window.innerWidth / window.innerHeight;
				cameraCube.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function onDocumentMouseMove(event) {

				//mouseX = ( event.clientX - windowHalfX ) * 10;
				//mouseY = ( event.clientY - windowHalfY ) * 10;

				mouseX = ( event.clientX - windowX/2 ) * 10;
				mouseY = ( event.clientY - windowY/2 ) * 10;
			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();

			}

			function render() {

				var timer = 0.0001 * Date.now();

				for ( var i = 0, il = spheres.length; i < il; i ++ ) {

					var sphere = spheres[ i ];

					sphere.position.x = 9000 * Math.cos( timer + i );
					sphere.position.y = 9000 * Math.sin( timer + i * 1.1 );

				}

				/*camera.position.x += ( mouseX - camera.position.x ) * .05;
				camera.position.y += ( - mouseY - camera.position.y ) * .05;
				camera.position.z += ( mouseX - mouseY - camera.position.z ) * .005;

				camera.lookAt( scene.position );
				*/

				time += 0.005;

				camera.position.x = Math.sin(time) * 50;
          		camera.position.z = Math.cos(time) * 50;
          		camera.position.x += ( mouseX - camera.position.x ) * .05;
				camera.position.y = ( - mouseY - camera.position.y ) * .05;
				
          		camera.lookAt(ORIGIN);

				cameraCube.rotation.copy( camera.rotation );

				renderer.render( sceneCube, cameraCube );
				renderer.render( scene, camera );

			}

		</script>